name: CI/CD Workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'

permissions:
  id-token: write # Required for OIDC (if you choose to implement later)
  contents: read

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4 # Updated to v4

      - name: Lint code
        run: echo "Linting repository" # Replace with actual linting command if available

      - name: Run unit tests
        run: echo "Running unit tests" # Replace with actual unit test command if available

  build-and-push-ecr-image:
    name: Continuous Delivery - Build & Push
    needs: integration # This job depends on 'integration'
    runs-on: ubuntu-latest
    outputs:
      # Define outputs to pass to subsequent jobs
      image: ${{ steps.build-image.outputs.image }}
      registry: ${{ steps.login-ecr.outputs.registry }} # Output the ECR registry URI

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4 # Updated to v4

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip # Install necessary utilities

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4 # Updated to v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }} # Ensure this secret is set to 'eu-central-1'

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2 # Updated to v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image # This step's ID is used for outputs
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: ${{ github.sha }} # Using commit SHA for unique image tagging
          # If you prefer 'latest', change IMAGE_TAG to: IMAGE_TAG: latest
        run: |
          # Build a docker container and push it to ECR
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
          # Set output for image name using the new syntax
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  Continuous-Deployment:
    name: Continuous Delivery - Deploy
    needs: build-and-push-ecr-image # This job depends on 'build-and-push-ecr-image'
    runs-on: self-hosted # Assuming you have a self-hosted runner configured
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4 # Updated to v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4 # Updated to v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }} # Ensure consistency with the build job

      - name: Login to Amazon ECR
        id: login-ecr # This re-logs in for the self-hosted runner, good for robustness
        uses: aws-actions/amazon-ecr-login@v2 # Updated to v2
      
      - name: Pull latest images from ECR
        run: |
          # Use the image output from the previous job
          docker pull ${{ needs.build-and-push-ecr-image.outputs.image }}
          
      - name: Stop and remove container if running
        run: |
          # This ensures a clean restart of the container
          if docker ps -q --filter "name=mlproj" | grep -q .; then
            echo "Stopping and removing existing 'mlproj' container..."
            docker stop mlproj
            docker rm -fv mlproj
          else
            echo "No existing 'mlproj' container found."
          fi
        
      - name: Run Docker Image to serve users
        run: |
          # Run the new container
          docker run -d -p 8080:8080 --name=mlproj \
            -e 'AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}' \
            -e 'AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}' \
            -e 'AWS_REGION=${{ secrets.AWS_REGION }}' \
            ${{ needs.build-and-push-ecr-image.outputs.image }} # Use the image output from the previous job
          echo "Container 'mlproj' started on port 8080